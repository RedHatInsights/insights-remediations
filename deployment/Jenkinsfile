#!/usr/bin/env groovy

@Library("github.com/RedHatInsights/insights-pipeline-lib@v3")

NS = 'remediations-ci'
TESTNS = 'remediations-pr'

def notify(subject, body, color) {
    message = subject
    if (body != null) {
        message += " | ${body}"
    }

    slackSend message: message, color: color, channel: '#remediations'
}

def notifyOnFailure(Closure step) {
    try {
        step()
    } catch (e) {
        notify("@Alec Cohan [${env.JOB_NAME.split('/')[-1]}] Build failed", "See ${env.BUILD_URL}console", "danger")
        throw e
    }
}

node {
    notifyOnFailure {
        notify("[${env.JOB_NAME.split('/')[-1]}] Build started", null, "#439FE0")

        env.NODEJS_HOME = "${tool 'node-10'}"
        env.PATH="${env.NODEJS_HOME}/bin:${env.PATH}"

        checkout scm

        def utils = load "./build/utils.groovy"

        def deploy = { namespace ->
            timeout (5) {
                openshift.withProject(namespace) {
                    try {
                        sh "oc scale --replicas=0 --namespace=${namespace} dc/remediations"
                        // need to bring down consumer also so that the database can be recreated
                        sh "oc scale --replicas=0 --namespace=${namespace} dc/remediations-consumer"

                        utils.waitFor(namespace, 0, 'remediations')
                        utils.waitFor(namespace, 0, 'remediations-consumer')

                        def dc = openshift.selector('dc', 'remediations')
                        dc.rollout().latest()
                        dc.rollout().status() // wait for rollout to reach desired replica count
                        // this recreates database and runs migrations
                    } finally {
                        sh "oc scale --replicas=1 --namespace=${namespace} dc/remediations"
                        utils.waitFor(namespace, 1, 'remediations')

                        sh "oc scale --replicas=1 --namespace=${namespace} dc/remediations-consumer"
                        utils.waitFor(namespace, 1, 'remediations-consumer')
                    }
                }
            }
        }

        sh 'git rev-parse HEAD'

        stage('build') {
            sh 'npm ci'
        }

        stage('cross-check ssg template validator') {
            sh "node src/validateTemplate.js src/connectors/ssg/mock/standard/*"
        }

        openshift.withCluster() {

            utils.withScaledEnv(TESTNS) {

                env.DB_HOST="postgres.${TESTNS}.svc"
                env.DB_DATABASE='remediationstest'

                stage('verify') {
                    env.VMAAS_IMPL='mock'

                    sh 'npm run verify'
                }

                stage('migration') {
                    sh 'npm run db:migrate'
                    sh 'npm run db:migrate:undo:all'
                }

                stage('contract tests') {
                    env.SSG_IMPL='impl'
                    env.SSG_HOST="http://playbooks-ssg.${NS}.svc:8080"

                    sh 'npm run test'
                }
            }

            stage('build image') {
                timeout (10) {
                    openshift.withProject('buildfactory') {
                        def build = openshift.selector('bc', 'remediations').startBuild()
                        build.logs('-f')
                    }
                }
            }

            stage('deploy to CI') {
                deploy('remediations-ci')
            }

            notify("[${env.JOB_NAME.split('/')[-1]}] Build finished", null, "good")
        }
    }
}
